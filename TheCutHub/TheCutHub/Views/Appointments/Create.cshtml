@model TheCutHub.Models.ViewModels.CreateAppointmentInputModel
@{
    ViewData["Title"] = "Create Appointment";
    var selectedDate = ViewBag.SelectedDate as DateTime?;
    var availableSlots = ViewBag.Slots as List<TimeSpan>;
}

<h1 class="mb-4">Create Appointment</h1>

<div class="card shadow p-4">
    <form asp-action="Create" method="post" novalidate>
        @Html.AntiForgeryToken()

        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="row mb-3">
            <div class="col-md-4">
                <label asp-for="Date" class="form-label"></label>
                <input asp-for="Date" id="date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="ServiceId" class="form-label">Service</label>
                <select asp-for="ServiceId" id="service" class="form-select" asp-items="ViewBag.ServiceId"></select>
                <span asp-validation-for="ServiceId" class="text-danger"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="BarberId" class="form-label">Barber</label>
                <select asp-for="BarberId" class="form-select" asp-items="ViewBag.BarberId"></select>
                <span asp-validation-for="BarberId" class="text-danger"></span>
            </div>
        </div>

        <div id="slots-container" class="mb-4">
            @if (availableSlots != null)
            {
                <h4 class="section-title">Available Time Slots</h4>
                <div class="row">
                    @foreach (var slot in availableSlots)
                    {
                        <div class="col-4 col-md-2 mb-2">
                            <button type="submit" name="TimeSlot"
                                    value="@slot.ToString(@"hh\:mm")"
                                    class="btn btn-outline-primary w-100">
                                @slot.ToString(@"hh\:mm")
                            </button>
                        </div>
                    }
                </div>

                @if (!availableSlots.Any())
                {
                    <p class="text-danger">No available slots for this date.</p>
                }
            }
        </div>

        <div class="mb-3">
            <label asp-for="Notes" class="form-label"></label>
            <textarea asp-for="Notes" class="form-control" rows="3"
                      placeholder="e.g. I prefer fade haircut..."></textarea>
            <span asp-validation-for="Notes" class="text-danger"></span>
        </div>

       
        <a asp-action="Index" class="btn btn-outline-dark">
            <i class="bi bi-arrow-left-circle me-1"></i>Back to Appointments
        </a>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        flatpickr("#date", { minDate: "today", dateFormat: "Y-m-d" });

        const dateEl = document.getElementById("date");
        const serviceEl = document.getElementById("service");
        const barberEl = document.querySelector("[name='BarberId']");
        const container = document.getElementById("slots-container");

        function getVals() {
            return {
                date: dateEl?.value ?? "",
                serviceId: serviceEl?.value ?? "",
                barberId: barberEl?.value ?? ""
            };
        }

        dateEl?.addEventListener("change", loadSlots);
        serviceEl?.addEventListener("change", loadSlots);
        barberEl?.addEventListener("change", loadSlots);

        document.addEventListener("DOMContentLoaded", () => loadSlots());

        async function loadSlots() {
            const { date, serviceId, barberId } = getVals();
            if (!date || !serviceId || !barberId) return;

            try {
                const res = await fetch(`/Appointments/GetSlots?date=${date}&serviceId=${serviceId}&barberId=${barberId}`, {
                    headers: { 'Accept': 'application/json' }
                });
                const text = await res.text();

                if (!res.ok) {
                    try { console.error('Load slots failed', res.status, JSON.parse(text)); }
                    catch { console.error('Load slots failed', res.status, text); }
                    return;
                }

                let slots;
                try { slots = JSON.parse(text); }
                catch (e) { console.error('Bad JSON from GetSlots:', text); return; }

                container.innerHTML = "";

                if (!slots.length) {
                    const p = document.createElement("p");
                    p.textContent = "No available slots for this date.";
                    p.classList.add("text-danger");
                    container.appendChild(p);
                    return;
                }

                const h = document.createElement("h4");
                h.textContent = "Available Time Slots";
                container.appendChild(h);

                const row = document.createElement("div");
                row.className = "row";

                slots.forEach(s => {
                    const col = document.createElement("div");
                    col.className = "col-4 col-md-2 mb-2";

                    const btn = document.createElement("button");
                    btn.type = "submit";
                    btn.name = "TimeSlot";
                    btn.value = s;            
                    btn.className = "btn btn-outline-primary w-100";
                    btn.textContent = s;

                    col.appendChild(btn);
                    row.appendChild(col);
                });

                container.appendChild(row);
            } catch (e) {
                console.error("Failed to load slots:", e);
            }
        }
    </script>
}
